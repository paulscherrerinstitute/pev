# $Source: /cvs/G/DRV/pev/Examples/VMEslave/G_DRV_pev_Examples_VMEslave_localdata.template,v $
# $Date: 2012/11/26 13:31:07 $
# $Revision: 1.2 $
# $Author: kalt_r $
#
# Original Author: KR84
# Date:            14.11.2012
#
# Important links:
#  - IFC1210 Codebeamer   https://codebeamer.psi.ch/cb/project/104
#  - IFC1210 User Guide   https://codebeamer.psi.ch/cb/doc/139156
#  - EPICS PEV driver     https://controls.web.psi.ch/cgi-bin/twiki/view/Main/IFC1210PEV100Driver
#
#
# Purpose: Purpose: VME master and slave example for accessing TOSCA-II
#           * slot 1 system is VME master
#           * slot 2 and 3 systems are VME slaves
#
# Purpose of this file:
#           * provide records for data storage in SMEM
#           * scanning on master/slot-1 is event-based
#           * scanning at slaves is passive, since the master will fetch this data over VME periodically

# USER1 block of Standard_IOC project. Find details of memory map definition here:
# https://codebeamer.psi.ch/cb/proj/sources/sccFileLog.do?proj_id=104&filename=IFC%2FIFC1210_applications%2FStandard_IOC%2FDocumentation%2FStandard_IOC_concept.doc&isDir=false



################################################################################
# Data in SMEM
################################################################################

# kick the 131 kByte block readout
record(bi,"$(IOC):SMEM-ReadInitiator")
{
    field(DTYP, "regDev")
    field(INP , "#C S @SMEM_data/0")
    field(PRIO, "HIGH")
}
# after the block-read is finished, this record is kicked I/O Intr
record(aai,"$(IOC):SMEM-DATA-R")
{
   field(DTYP, "regDev")
   field(SCAN, "I/O Intr")
   field(SCAN, "$(SMEMdata_read_scan)")
   field(EVNT, "$(SMEMdata_read_evnt)")
   field(INP,  "#C S @SMEM_data/0x0 T=UINT32")
   field(NELM, "$(data_len)")  # but warning here!!! should not exceed limit given for SMEM_data in startup.script, so max allowed value = 32768
   field(FTVL, "ULONG")
   field(FLNK, "$(IOC):SMEM-DATA-R-FINISHEVENT")
}
record(event,"$(IOC):SMEM-DATA-R-FINISHEVENT")
{
    field(DTYP,"Soft Channel")
    field(VAL ,"$(Local_Data_finish_evnt)")
}



# these records write to memory buffer in kernel, with WriteInitiator the whole buffer is written towards SMEM
record(aao,"$(IOC):SMEM-WAVEFORM-W")
{
   field(DTYP, "regDev")
   field(OUT,  "#C S @SMEM_data/0 T=UINT32")
   field(NELM, "$(data_len)")
   field(FTVL, "ULONG")
   field(FLNK, "$(IOC):SMEM-WriteInitiator")
}
record(bo,"$(IOC):SMEM-WriteInitiator")
{
    field(DTYP, "regDev")
    field(OUT , "#C S @SMEM_data/0")
    field(PRIO, "HIGH")
}





