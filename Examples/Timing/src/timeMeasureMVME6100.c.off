/* $Author: kalt_r $
*  $Date: 2012/11/13 12:30:22 $
* $Revision: 1.1 $
*
* ATTENTION:
* This function uses a vxWorks function to get the PPC timer register.
* Therefore the measurement is depenant of the 133 MHz / 4 = 33 MHz
* busspeed, where 133 MHz is valid for the MVME6100 IOC only !!
*/
#define DEBUG 0

#include <genSubRecord.h>
#include <stdio.h>
#include <stdlib.h>
#include <stdarg.h>
#include <string.h>
#include <ctype.h>
#include <time.h>
#include <signal.h>
#include <unistd.h>
#include <vxWorks.h>
#include <semLib.h>
#include <taskLib.h>
/*#include "lockOutput.h"    included here in this file */
#include <menuFtype.h>
#include <sysLib.h>

/* start lockoutput*/
/**
  * locks the semaphore for sequential printf
  * @return OK or ERROR
  */
int lockOutput ( void );

/**
  * locks the semaphore for sequential printf
  * @return OK or ERROR
  */
int unlockOutput ( void );

/**
  * locks a semaphore for sequential printf, executes printf, unlocks the semaphore
  * @param format pointer to the format string for vprintf
  * @param ... parameter list for vprintf
  * @return the result of vprintf or ERROR depending on the locking success
*/
int lockPrintf ( char *format, ... );


SEM_ID lockOutput_SEM = NULL;

/**
  * generates the locking semaphore for sequential printf
  * @return OK or ERROR
  */
int generateLock ( void )
{
    if ( ( lockOutput_SEM = semBCreate ( SEM_Q_FIFO, SEM_FULL ) ) == NULL )
    {
        printf ( " ( e: %s: %s() line: %d ) semBCreate () returned NULL.\r\n", __FILE__ + 3, __FUNCTION__, __LINE__ );
        printf ( " ( i: %s: %s() ) Errno String: %s\r\n", __FILE__ + 3, __FUNCTION__, strerror ( errno ) );
        return ERROR;
    }
    return OK;
}

/**
  * locks the semaphore for sequential printf
  * @return OK or ERROR
  */
int lockOutput ( void )
{
    if ( lockOutput_SEM == NULL )
    {
        if ( generateLock () == ERROR )
        {
            printf ( " ( e: %s: %s() line: %d ) generateLock () was not successful.\r\n", __FILE__ + 3, __FUNCTION__, __LINE__ );
            return ERROR;
        }
    }
    if ( semTake ( lockOutput_SEM, WAIT_FOREVER ) == ERROR )
    {
        printf ( " ( e: %s: %s() line: %d ) semTake () was not successful.\r\n", __FILE__ + 3, __FUNCTION__, __LINE__ );
        return ERROR;
    }
    return OK;
}

/**
  * locks the semaphore for sequential printf
  * @return OK or ERROR
  */
int unlockOutput ( void )
{
    if ( lockOutput_SEM == NULL )
    {
        if ( generateLock () == ERROR )
        {
            printf ( " ( e: %s: %s() line: %d ) generateLock () was not successful.\r\n", __FILE__ + 3, __FUNCTION__, __LINE__ );
            return ERROR;
        }
    }
    semGive ( lockOutput_SEM );
    return OK;
}

/**
  * locks a semaphore for sequential printf, executes printf, unlocks the semaphore
  * @param format pointer to the format string for vprintf
  * @param ... parameter list for vprintf
  * @return the result of vprintf or ERROR depending on the locking success
*/
int lockPrintf ( char *format, ... )
{
    va_list arg_list;
    int returnValue = 0;
    if ( lockOutput ( ) )
        return ERROR;
    va_start ( arg_list, format );
    returnValue = vprintf ( format, arg_list );
    if ( unlockOutput () )
        return ERROR;
    return returnValue;
}
/* end lockoutput*/




IMPORT void     vxTimeBaseGet (UINT32 * pTbu, UINT32 * pTbl);
    
/**
 * Global structure for storing information by different tasks.
 */

typedef struct
{
    long measuringStarted;
    unsigned long startTimeCounter;
    long restartCounter;
    long restopCounter;
    long firstMeasuring;
    float timeMin;
    float timeMax;
} timeMeasureStorageData;

/** Initializes and spanws a timeMeasure task.
  * A    : Measuriung Start Stop indicator ( long ), 1 active
  * B    : Measuring reset indicator ( long ), 1 active
  * VALA : Actual time measured ( float ) / ms
  * VALB : Minimum time measured ( float ) / ms
  * VALC : Maximum time measured ( float ) / ms
  * VALD : restart counter ( long )
  * VALE : restop counter ( long )
  * VALF : vxTimeBaseGet PPC-TIME value
  * @param pointer to genSubRecord from epics
  * @return OK: Sub Task successfully created, ERROR when an error occurred while spawning Sub Task
  */
int MVME6100_timeMeasureInit ( struct genSubRecord* genSubData )
{    
    timeMeasureStorageData* dataStorage = NULL;
    int init_error_flag=0;

    if ( DEBUG )
        lockPrintf ( " ( i: %s ) %s started.\r\n", __FILE__ + 3, __FUNCTION__ );
    if ( genSubData == NULL )
    {
        lockPrintf ( " ( e: %s: %s() line: %d ) No genSubData to process.\r\n", __FILE__ + 3, __FUNCTION__, __LINE__ );
        lockPrintf ( " ( i: %s: %s() ) Errno String: %s\r\n", __FILE__ + 3, __FUNCTION__, strerror ( errno ) );
        return ERROR;
    }
    if ( ( dataStorage = ( timeMeasureStorageData* ) malloc ( sizeof ( timeMeasureStorageData ) ) ) == NULL )
    {
        lockPrintf ( " ( e: %s: %s() line: %d ) malloc () returned NULL.\r\n", __FILE__ + 3, __FUNCTION__, __LINE__ );
        lockPrintf ( " ( i: %s: %s() ) Errno String: %s\r\n", __FILE__ + 3, __FUNCTION__, strerror ( errno ) );
        return ERROR;
    }
    genSubData -> dpvt = dataStorage;
    dataStorage -> measuringStarted = 0;
    dataStorage -> startTimeCounter = 0;
    dataStorage -> restartCounter = 0;
    dataStorage -> restopCounter = 0;
    dataStorage -> firstMeasuring = 1;
    dataStorage -> timeMin = 0.0;
    dataStorage -> timeMax = 0.0;
    {/*Checks for input output fields*/
        init_error_flag = 0;
        if (genSubData->fta!=menuFtypeLONG) 
        {
            init_error_flag=ERROR;
            lockPrintf(" ( e: %s ) FTA not LONG\r\n", __FUNCTION__);
        }
        if (genSubData->noa!=1)
        {
            init_error_flag=ERROR;
            lockPrintf(" ( e: %s ) NOA not 1\r\n", __FUNCTION__);
        }
        if (genSubData->ftb!=menuFtypeLONG) 
        {
            init_error_flag=ERROR;
            lockPrintf(" ( e: %s ) FTB not LONG\r\n", __FUNCTION__);
        }
        if (genSubData->nob!=1)
        {
            init_error_flag=ERROR;
            lockPrintf(" ( e: %s ) NOB not 1\r\n", __FUNCTION__);
        }
        if (genSubData->ftva!=menuFtypeLONG) 
        {
            init_error_flag=ERROR;
            lockPrintf(" ( e: %s ) FTVA type not LONG\r\n", __FUNCTION__);
        }
        if (genSubData->nova!=1) 
        {
            init_error_flag=ERROR;
            lockPrintf(" ( e: %s ) NOVA not 1\r\n", __FUNCTION__);
        }
        if (genSubData->ftvb!=menuFtypeLONG) 
        {
            init_error_flag=ERROR;
            lockPrintf(" ( e: %s ) FTVB type not LONG\r\n", __FUNCTION__);
        }
        if (genSubData->novb!=1) 
        {
            init_error_flag=ERROR;
            lockPrintf(" ( e: %s ) NOVB not 1\r\n", __FUNCTION__);
        }
        if (genSubData->ftvc!=menuFtypeLONG) 
        {
            init_error_flag=ERROR;
            lockPrintf(" ( e: %s ) FTVC type not LONG\r\n", __FUNCTION__);
        }
        if (genSubData->novc!=1) 
        {
            init_error_flag=ERROR;
            lockPrintf(" ( e: %s ) NOVC not 1\r\n", __FUNCTION__);
        }
        if (genSubData->ftvd!=menuFtypeLONG) 
        {
            init_error_flag=ERROR;
            lockPrintf(" ( e: %s ) FTVD type not LONG\r\n", __FUNCTION__);
        }
        if (genSubData->novd!=1) 
        {
            init_error_flag=ERROR;
            lockPrintf(" ( e: %s ) NOVD not 1\r\n", __FUNCTION__);
        }
        if (genSubData->ftve!=menuFtypeLONG) 
        {
            init_error_flag=ERROR;
            lockPrintf(" ( e: %s ) FTVE type not LONG\r\n", __FUNCTION__);
        }
        if (genSubData->nove!=1) 
        {
            init_error_flag=ERROR;
            lockPrintf(" ( e: %s ) NOVE not 1\r\n", __FUNCTION__);
        }
        if (genSubData->ftvf!=menuFtypeFLOAT) 
        {
            init_error_flag=ERROR;
            lockPrintf(" ( e: %s ) FTVF type not FLOAT\r\n", __FUNCTION__);
        }
        if (genSubData->novf!=1) 
        {
            init_error_flag=ERROR;
            lockPrintf(" ( e: %s ) NOVF not 1\r\n", __FUNCTION__);
        }
        if (init_error_flag==ERROR)
        {
            lockPrintf ( " ( e: %s: %s() line: %d ) Aborted.\r\n", __FILE__ + 3, __FUNCTION__, __LINE__ );
            return ERROR;
        }
    }
    if ( DEBUG )
        lockPrintf ( " ( i: %s ) %s initialized completely.\r\n", __FILE__ + 3, __FUNCTION__ );
    return OK;
}

/** Function is called from genSubRecord when PROC filed is set to 1. 
  * The funtion stores the actual time parameters when inpa = 1 given in the genSubData. And returns the time difference when called with inpa = 0.
  * @param genSubData genSubRecord from epics
  * @return ERROR or OK
  */
int MVME6100_timeMeasure ( struct genSubRecord* genSubData )
{
    timeMeasureStorageData* dataStorage = NULL;
    /*struct timespec tp;*/
    long startStopSelect = 0;
    long reset = 0;
    long *outTimeAct = NULL;
    long *outTimeMin = NULL;
    long *outTimeMax = NULL;
    long *outRestartCounter = NULL;
    long *outRestopCounter = NULL;
    float *ppcTime = NULL;
    UINT32 pTbu = 0;
    UINT32 pTbl = 0;
    if ( DEBUG )
        lockPrintf ( " ( i: %s ) %s started.\r\n", __FILE__ + 3, __FUNCTION__ );
    if ( genSubData == NULL )
    {
        lockPrintf ( " ( e: %s: %s() ) No genSubData to process\r\n", __FILE__ + 3, __FUNCTION__ );
        return ERROR;
    }
    dataStorage = ( timeMeasureStorageData* ) genSubData -> dpvt;
    if ( dataStorage == NULL )
    {
        lockPrintf ( " ( e: %s: %s() ) genSubData -> dpvt = NULL. Seams that the init function was not called yet, or had errors. Aborting.\r\n", __FILE__ + 3, __FUNCTION__ );
        return ERROR;
    }

    startStopSelect = *( long * ) genSubData -> a;
    reset = * ( long * ) genSubData -> b;
    outTimeAct = ( long * ) genSubData -> vala;
    outTimeMin = ( long * ) genSubData -> valb;
    outTimeMax = ( long * ) genSubData -> valc;
    outRestartCounter = ( long * ) genSubData -> vald;
    outRestopCounter = ( long * ) genSubData -> vale;
    ppcTime = genSubData -> valf;
    vxTimeBaseGet (& pTbu, & pTbl); /*pTbu does not seam to work here*/
    * ppcTime = ( ( float ) pTbl ) / 33333333;  /* assumes 33.333 MHz = Bus_clk / 4, then Bus_clk = 133 MHz (this is the speed of the PowerPC processor bus of the MVME6100 IOC) */
    if ( reset )
        dataStorage -> firstMeasuring = 1;
    if ( startStopSelect == 1 && dataStorage -> measuringStarted == 0 )
    {
        dataStorage -> startTimeCounter = pTbl;
        dataStorage -> measuringStarted = 1;
    }
    else if ( startStopSelect == 1 && dataStorage -> measuringStarted == 1 )
    {
        dataStorage -> restartCounter ++; /* counts up serveral start commands */
        *outRestartCounter = dataStorage -> restartCounter;
    }
    else if ( startStopSelect == 0 && dataStorage -> measuringStarted == 0 )
    {
        dataStorage -> restopCounter ++; /* counts up serveral start commands */
        *outRestopCounter = dataStorage -> restopCounter;
    }
    else if ( startStopSelect == 0 && dataStorage -> measuringStarted == 1 )
    {
        dataStorage -> measuringStarted = 0;
        *outTimeAct = ( ( long ) ( pTbl - dataStorage -> startTimeCounter ) ) / 33.333333; /* here again, the 133 MHz bus clock speed of an MVME6100 IOC */
        if ( dataStorage -> firstMeasuring )
        {
            dataStorage -> timeMax = * outTimeAct;
            *outTimeMax = *outTimeAct;
            dataStorage -> timeMin = * outTimeAct;
            *outTimeMin = *outTimeAct;
            dataStorage -> restartCounter = 0;
            *outRestartCounter = 0;
            dataStorage -> restopCounter = 0;
            *outRestopCounter = 0;
            dataStorage -> firstMeasuring = 0;
        }
        if ( *outTimeAct > dataStorage -> timeMax )
        {
            dataStorage -> timeMax = * outTimeAct;
            *outTimeMax = *outTimeAct;
        }
        if ( *outTimeAct < dataStorage -> timeMin )
        {
            dataStorage -> timeMin = * outTimeAct;
            *outTimeMin = *outTimeAct;
        }
    }
    else 
        if ( DEBUG )
            lockPrintf ( " ( w: %s ) %s Stop without Start event.\r\n", __FILE__ + 3, __FUNCTION__ );
    if ( DEBUG )
        lockPrintf ( " ( i: %s ) %s done.\r\n", __FILE__ + 3, __FUNCTION__ );
    return OK;
}
