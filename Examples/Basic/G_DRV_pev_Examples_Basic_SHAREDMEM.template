# $Source: /cvs/G/DRV/pev/Examples/Basic/G_DRV_pev_Examples_Basic_SHAREDMEM.template,v $
# $Date: 2012/11/13 15:09:32 $
# $Revision: 1.3 $
# $Author: kalt_r $
#
# Original Author: KR84
# Date:            28.08.2012
#
# Important links:
#  - IFC1210 Codebeamer   https://codebeamer.psi.ch/cb/project/104
#  - IFC1210 User Guide   https://codebeamer.psi.ch/cb/doc/139156
#  - EPICS PEV driver     https://controls.web.psi.ch/cgi-bin/twiki/view/Main/IFC1210PEV100Driver
#
#
# Purpose: Basic Example for accessing TOSCA-II
#           * USERBLOCK in Virtex-6 CENTRAL FPGA
#           * 512 MB shared memory connected to Virtex-6 CENTRAL FPGA
#           * VME64x-bridge in Virtex-6 CENTRAL FPGA
#
# Purpose of this file:
#           * access to 512 MB shared memory connected to Virtex-6 CENTRAL FPGA


######################################################################
# SHMEM read block with DMA and then distribute to individual records
#
# This block-read using pevConfigure is the only possibility. This
# is used to read a big block of data and then distribute to several
# recrods.
# In any case you are forced to use block-read with DMA behind, even
# if you want to read only a single ai / UINT32.
# This is a limitation since we have PMEM windows of TOSCA-II reserved
# for VME_A32 access and not to SHARED-MEMORY.
######################################################################

# kick the 131 kByte block readout
# (this is kicked from USER Interrupt 12->EPICS soft-evt 12->USER Ramp read)
record(bi,"$(IOC):SMEM-ReadInitiator")
{
    field(DTYP, "regDev")
    field(INP , "#C S @SharedMemoryExampleBasicDataBlock_R/0")
    field(PRIO, "HIGH")
}
######################################################################

# after the block-read is finished, this record is kicked I/O Intr
record(ai,"$(IOC):SMEM-TESTREG0")
{
    field(DESC, "a register")
    field(DTYP, "regDev")
    field(SCAN, "I/O Intr")
    field(INP , "#C S @SharedMemoryExampleBasicDataBlock_R/0x0 T=UINT32")
    field(FLNK, "$(IOC):SMEM-TESTREG4")
}

record(ai,"$(IOC):SMEM-TESTREG4")
{
    field(DESC, "a register")
    field(DTYP, "regDev")
    field(INP , "#C S @SharedMemoryExampleBasicDataBlock_R/0x4 T=UINT32")
    field(FLNK, "$(IOC):SMEM-TESTREG8")
}

record(ai,"$(IOC):SMEM-TESTREG8")
{
    field(DESC, "a register")
    field(DTYP, "regDev")
    field(INP , "#C S @SharedMemoryExampleBasicDataBlock_R/0x8 T=UINT32")
    field(FLNK, "$(IOC):SMEM-WAVEFORM-R")
}

record(aai,"$(IOC):SMEM-WAVEFORM-R")
{
   field(DTYP, "regDev")
   field(INP,  "#C S @SharedMemoryExampleBasicDataBlock_R/0x100 T=UINT32")
   field(NELM, "2048")
   field(FTVL, "LONG")
   field(FLNK, "$(IOC):SMEM-WriteInitiator")
}



######################################################################
# SHMEM write with DMA
# Write towards SMEM using pevConfigure and block-write.
######################################################################

record(bo,"$(IOC):SMEM-WriteInitiator")
{
    field(DTYP, "regDev")
    field(OUT , "#C S @SharedMemoryExampleBasicDataBlock_W/0")
    field(PRIO, "HIGH")
}

# after the block-write is finished, this record is kicked I/O Intr
record(aao,"$(IOC):SMEM-WAVEFORM-W")
{
   field(DTYP, "regDev")
   field(OUT,  "#C S @SharedMemoryExampleBasicDataBlock_W/0x100 T=UINT32")
   field(NELM, "2048")
   field(FTVL, "LONG")
   field(SCAN, "I/O Intr")
   field(FLNK, "$(IOC):SMEM-REG-W")
}

record(ao,"$(IOC):SMEM-REG-W")
{
   field(DTYP, "regDev")
   field(OUT,  "#C S @SharedMemoryExampleBasicDataBlock_W/0x0 T=UINT32")
   field(FLNK, "$(IOC):SOFT-INTID12-CALC")  # kick SOFT record interrupt counter
#   field(FLNK, "$(IOC):USER-INTTIM12-STOP") # kick latency counter stop record
}

