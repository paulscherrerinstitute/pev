# $Source: /cvs/G/DRV/pev/Examples/Basic/G_DRV_pev_Examples_Basic_USERBLOCK.template,v $
# $Date: 2012/11/13 15:09:32 $
# $Revision: 1.4 $
# $Author: kalt_r $
#
# Original Author: KR84
# Date:            28.08.2012
#
# Important links:
#  - IFC1210 Codebeamer   https://codebeamer.psi.ch/cb/project/104
#  - IFC1210 User Guide   https://codebeamer.psi.ch/cb/doc/139156
#  - EPICS PEV driver     https://controls.web.psi.ch/cgi-bin/twiki/view/Mlonginn/IFC1210PEV100Driver
#
#
# Purpose: Basic Example for accessing TOSCA-II
#           * USERBLOCK in Virtex-6 CENTRAL FPGA
#           * 512 MB shared memory connected to Virtex-6 CENTRAL FPGA
#           * VME64x-bridge in Virtex-6 CENTRAL FPGA
#
# Purpose of this file:
#           * access to USERBLOCK in Virtex-6 CENTRAL FPGA

# USER1 block of Standard_IOC project. Find detlonginls of memory map definition here:
# https://codebeamer.psi.ch/cb/scm/file/179696//IFC/IFC1210_applications/Standard_IOC/Documentation/Standard_IOC_concept.doc/open
######################################################################
# TCSR: TOSCA Configuration Space Registers (single access)
######################################################################
record(longin,"$(IOC):USER-TCSR-ENDIAN")
{
    field(DESC, "endian test reg") # should read X"76543210"(lsb) ???
    field(DTYP, "ifc1210")
    field(PINI, "YES")             # read once a at startup of EPICS
    field(INP , "#C S0x1000 @PIO")
}

record(longin,"$(IOC):USER-TCSR-TESTREG-R")
{
    field(DESC, "test reg read")
    field(DTYP, "ifc1210")
    field(SCAN, ".5 second")
    field(INP , "#C S0x1004 @PIO")
}

record(longout,"$(IOC):USER-TCSR-TESTREG-W")
{
    field(DESC, "test reg write")
    field(DTYP, "ifc1210")
    field(OUT , "#C S0x1004 @PIO")
}

record(longout,"$(IOC):USER-TCSR-INTMOD")
{
    field(DESC, "int mode lvl/edge") # each bit: 0 = level / 1 = edge
    field(DTYP, "ifc1210")
    field(OUT , "#C S0x1008 @PIO")
    field(PINI, "YES")
    field(VAL,  "65535") # set all 16 interrupts to edge
}

record(mbboDirect, "$(IOC):USER-TCSR-INTREQ")
{
    field(DESC, "int request")
    field(PINI, "YES")
    field(UDF,  "0") # workaround for mbboDirect bug
    field(OUT,  "$(IOC):USER-TCSR-INTREQ-HW PP")
}

record(longout,"$(IOC):USER-TCSR-INTREQ-HW")
{
    field(DESC, "int request")
    field(DTYP, "ifc1210")
    field(OUT , "#C S0x100C @PIO")
}

record(longout,"$(IOC):USER-TCSR-INTCSR")
{
    field(DESC, "int csr")
    field(DTYP, "ifc1210")
    field(OUT , "#C S0x1084 @PIO")
    field(PINI, "YES")
    field(VAL,  "3") # clear all pending interrupts once at startup, enable INT16 ITC
}

record(longout,"$(IOC):USER-TCSR-INTIMC")
{
    field(DESC, "int IMC")
    field(DTYP, "ifc1210")
    field(OUT , "#C S0x1088 @PIO")
    field(PINI, "YES")
    field(VAL,  "0x800") # clear intr mask 12 (0x800)
}

record(longout,"$(IOC):USER-TCSR-INTIMS")
{
    field(DESC, "int IMS")
    field(DTYP, "ifc1210")
    field(OUT , "#C S0x108C @PIO")
    field(PINI, "YES")
    field(VAL,  "0x0") # do not mask any interrupt
}


######################################################################
# TMEM: TOSCA Memory
######################################################################

# some commands with rw registers, passive scanning
record(longout,"$(IOC):USER-RAMP-INITIAL")
{
   field(DTYP, "regDev")
   field(OUT,  "@Usr1StdIOCUserRegisters:0x0 T=UINT32")
   field(VAL,  "0")
   field(PINI, "YES")
}

record(longout,"$(IOC):USER-FMC1LED")
{
   field(DTYP, "regDev")
   field(OUT,  "@Usr1StdIOCUserRegisters:0x4 T=UINT32")
   field(VAL,  "0")
   field(PINI, "YES")
}

record(longout,"$(IOC):USER-FMC2LED")
{
   field(DTYP, "regDev")
   field(OUT,  "@Usr1StdIOCUserRegisters:0x8 T=UINT32")
   field(VAL,  "0")
   field(PINI, "YES")
}

record(ao,"$(IOC):USER-INTRATE")
{
   field(DTYP, "regDev")
   field(OUT,  "@Usr1StdIOCUserRegisters:0xC T=UINT32")
   field(VAL,  "10")
   field(LINR, "SLOPE")
   field(ESLO, ".00001")
   field(PINI, "YES")
   field(EGU,  "ms")
   field(PREC, "5")
}

record(ao,"$(IOC):USER-INTLENGTH")
{
   field(DTYP, "regDev")
   field(OUT,  "@Usr1StdIOCUserRegisters:0x10 T=UINT32")
   field(VAL,  ".01")
   field(LINR, "SLOPE")
   field(ESLO, ".01")
   field(PINI, "YES")
   field(EGU,  "us")
   field(PREC, "2")
}

record(longout,"$(IOC):USER-INTRST")
{
   field(DESC, "reset int counters")
   field(DTYP, "regDev")
   field(OUT,  "@Usr1StdIOCUserRegisters:0x14 T=UINT32")
   field(VAL,  "0")
}

######################################################################
# Listen to USER interrupt 12 and fire an EPICS soft event with nr. 12

# Here we make longin from offset 0x0, but this has no influence where we read.
# It is important we listen to I/O Intr of correct virtual device.
# This is some small overhead of one 32-bit read access before firing EPICS soft-event 12.
record(longin,"$(IOC):USER-INTEVT-12-RX")
{
   field(DTYP, "regDev")
   field(SCAN, "I/O Intr")
   field(INP,  "@Usr1StdIOCUserRegistersINT12:0x0 T=UINT32")
#   field(FLNK, "$(IOC):USER-RAMP-IN") # directly FLNK to dma input transfer if required
   field(FLNK, "$(IOC):USER-INTEVT-12") # fire EPICS soft-event 12
}
record(event,"$(IOC):USER-INTEVT-12")
{
    field(DESC,"user intr. 12")
    field(DTYP,"Soft Channel")
    field(VAL ,"12")
}


######################################################################
######################################################################
# here the application itself starts, we read some ramp data

# the ramp waveform, readout with EPICS soft-event 12
# (see startup.script for virtual device definition)
record(aai,"$(IOC):USER-RAMP-IN")
{
   field(DTYP, "regDev")
   field(SCAN, "Event")
   field(EVNT, "12")
   field(INP,  "@Usr1StdIOCUserRamp/0x0 T=UINT32")
   field(NELM, "1024")
   field(FTVL, "ULONG")
   field(FLNK, "$(IOC):USER-RAMP-OUT")
}

record(aao,"$(IOC):USER-RAMP-OUT")
{
   field(DTYP, "regDev")
   field(OUT,  "@Usr1StdIOCUserRamp/0x1000 T=UINT32")
   field(NELM, "1024")
   field(FTVL, "ULONG")
#   field(FLNK, "$(IOC):SOFT-INTID12-CALC")  # kick SOFT record interrupt counter
#   field(FLNK, "$(IOC):USER-INTTIM12-STOP") # kick latency counter stop record
   field(FLNK, "$(IOC):SMEM-ReadInitiator") # kick shared memory readout
}

