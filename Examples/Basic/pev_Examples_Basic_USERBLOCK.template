# $Source: /cvs/G/DRV/pev/Examples/Basic/G_DRV_pev_Examples_Basic_USERBLOCK.template,v $
# $Date: 2012/11/13 15:09:32 $
# $Revision: 1.4 $
# $Author: kalt_r $
#
# Original Author: KR84
# Date:            28.08.2012
#
# Important links:
#  - IFC1210 Codebeamer   https://codebeamer.psi.ch/cb/project/104
#  - IFC1210 User Guide   https://codebeamer.psi.ch/cb/doc/139156
#  - EPICS PEV driver     https://controls.web.psi.ch/cgi-bin/twiki/view/Mlonginn/IFC1210PEV100Driver
#
#
# Purpose: Basic Example for accessing TOSCA-II
#           * USERBLOCK in Virtex-6 CENTRAL FPGA
#           * 512 MB shared memory connected to Virtex-6 CENTRAL FPGA
#           * VME64x-bridge in Virtex-6 CENTRAL FPGA
#
# Purpose of this file:
#           * access to USERBLOCK in Virtex-6 CENTRAL FPGA

# USER1 block of Standard_IOC project. Find detlonginls of memory map definition here:
# https://codebeamer.psi.ch/cb/scm/file/179696//IFC/IFC1210_applications/Standard_IOC/Documentation/Standard_IOC_concept.doc/open
######################################################################
# TCSR: TOSCA Configuration Space Registers (single access)
######################################################################
record(longin,"$(IOC):USER-TCSR-ENDIAN")
{
    field(DESC, "endian test reg") # should read X"76543210"(lsb)
    field(DTYP, "ifc1210")
    field(PINI, "YES")             # read once a at startup of EPICS
    field(INP , "#C S0x1000 @PIO")
}

record(longin,"$(IOC):USER-TCSR-TESTREG-R")
{
    field(DESC, "test reg read")
    field(DTYP, "ifc1210")
    field(SCAN, ".5 second")
    field(INP , "#C S0x1004 @PIO")
}

record(longout,"$(IOC):USER-TCSR-TESTREG-W")
{
    field(DESC, "test reg write")
    field(DTYP, "ifc1210")
    field(OUT , "#C S0x1004 @PIO")
}

record(longout,"$(IOC):USER-TCSR-INTMOD")
{
    field(DESC, "int mode lvl/edge") # each bit: 0 = level / 1 = edge
    field(DTYP, "ifc1210")
    field(OUT , "#C S0x1008 @PIO")
    field(PINI, "YES")  
    field(VAL,  "65535") # set all 16 interrupts to edge
}

record(mbboDirect, "$(IOC):USER-TCSR-INTREQ")
{
    field(DESC, "int request")
    field(PINI, "YES")  
    field(OUT,  "$(IOC):USER-TCSR-INTREQ-HW PP")
}

record(longout,"$(IOC):USER-TCSR-INTREQ-HW")
{
    field(DESC, "int request")
    field(DTYP, "ifc1210")
    field(OUT , "#C S0x100C @PIO")
}

record(longout,"$(IOC):USER-TCSR-INTCSR")
{
    field(DESC, "int csr")
    field(DTYP, "ifc1210")
    field(OUT , "#C S0x1084 @PIO")
    field(PINI, "YES")  
    field(VAL,  "3") # clear all pending interrupts once at startup, enable INT16 ITC
}

record(longout,"$(IOC):USER-TCSR-INTIMC")
{
    field(DESC, "int IMC")
    field(DTYP, "ifc1210")
    field(OUT , "#C S0x1088 @PIO")
    field(PINI, "YES")  
    field(VAL,  "0x800") # clear intr mask 12 (0x800)
}

record(longout,"$(IOC):USER-TCSR-INTIMS")
{
    field(DESC, "int IMS")
    field(DTYP, "ifc1210")
    field(OUT , "#C S0x108C @PIO")
    field(PINI, "YES")  
    field(VAL,  "0x0") # do not mask any interrupt
}


######################################################################
# TMEM: TOSCA Memory
######################################################################

# some commands with rw registers, passive scanning
record(longout,"$(IOC):USER-RAMP-INITIAL")
{
   field(DTYP, "regDevAsyn")
   field(OUT,  "@Usr1StdIOCUserRegisters:0x0 T=UINT32")
   field(VAL,  "0")
   field(PINI, "YES")
}

record(longout,"$(IOC):USER-FMC1LED")
{
   field(DTYP, "regDevAsyn")
   field(OUT,  "@Usr1StdIOCUserRegisters:0x4 T=UINT32")
   field(VAL,  "0")
   field(PINI, "YES")
}

record(longout,"$(IOC):USER-FMC2LED")
{
   field(DTYP, "regDevAsyn")
   field(OUT,  "@Usr1StdIOCUserRegisters:0x8 T=UINT32")
   field(VAL,  "0")
   field(PINI, "YES")
}

record(ao,"$(IOC):USER-INTRATE")
{
   field(DTYP, "regDevAsyn")
   field(OUT,  "@Usr1StdIOCUserRegisters:0xC T=UINT32")
   field(VAL,  "10")
   field(LINR, "SLOPE")
   field(ESLO, ".00001")
   field(PINI, "YES")
   field(EGU,  "ms")
   field(PREC, "5")
}

record(ao,"$(IOC):USER-INTLENGTH")
{
   field(DTYP, "regDevAsyn")
   field(OUT,  "@Usr1StdIOCUserRegisters:0x10 T=UINT32")
   field(VAL,  ".01")
   field(LINR, "SLOPE")
   field(ESLO, ".01")
   field(PINI, "YES")
   field(EGU,  "us")
   field(PREC, "2")
}

record(longout,"$(IOC):USER-INTRST")
{
   field(DESC, "reset int counters")
   field(DTYP, "regDevAsyn")
   field(OUT,  "@Usr1StdIOCUserRegisters:0x14 T=UINT32")
   field(VAL,  "0")
}

#some status, periodic asynchronous scanning
#the interrupt counters for each of 16 possible interrupts
record(longin,"$(IOC):USER-INTID1")
{
   field(DTYP, "regDevAsyn")
   field(INP,  "@Usr1StdIOCUserRegisters:0x18 T=UINT32")
   field(SCAN, ".5 second")
   field(FLNK, "$(IOC):USER-INTID2")
}
record(longin,"$(IOC):USER-INTID2")
{
   field(DTYP, "regDevAsyn")
   field(INP,  "@Usr1StdIOCUserRegisters:0x1C T=UINT32")
   field(FLNK, "$(IOC):USER-INTID3")
}
record(longin,"$(IOC):USER-INTID3")
{
   field(DTYP, "regDevAsyn")
   field(INP,  "@Usr1StdIOCUserRegisters:0x20 T=UINT32")
   field(FLNK, "$(IOC):USER-INTID4")
}
record(longin,"$(IOC):USER-INTID4")
{
   field(DTYP, "regDevAsyn")
   field(INP,  "@Usr1StdIOCUserRegisters:0x24 T=UINT32")
   field(FLNK, "$(IOC):USER-INTID5")
}
record(longin,"$(IOC):USER-INTID5")
{
   field(DTYP, "regDevAsyn")
   field(INP,  "@Usr1StdIOCUserRegisters:0x28 T=UINT32")
   field(FLNK, "$(IOC):USER-INTID6")
}
record(longin,"$(IOC):USER-INTID6")
{
   field(DTYP, "regDevAsyn")
   field(INP,  "@Usr1StdIOCUserRegisters:0x2C T=UINT32")
   field(FLNK, "$(IOC):USER-INTID7")
}
record(longin,"$(IOC):USER-INTID7")
{
   field(DTYP, "regDevAsyn")
   field(INP,  "@Usr1StdIOCUserRegisters:0x30 T=UINT32")
   field(FLNK, "$(IOC):USER-INTID8")
}
record(longin,"$(IOC):USER-INTID8")
{
   field(DTYP, "regDevAsyn")
   field(INP,  "@Usr1StdIOCUserRegisters:0x34 T=UINT32")
   field(FLNK, "$(IOC):USER-INTID9")
}
record(longin,"$(IOC):USER-INTID9")
{
   field(DTYP, "regDevAsyn")
   field(INP,  "@Usr1StdIOCUserRegisters:0x38 T=UINT32")
   field(FLNK, "$(IOC):USER-INTID10")
}
record(longin,"$(IOC):USER-INTID10")
{
   field(DTYP, "regDevAsyn")
   field(INP,  "@Usr1StdIOCUserRegisters:0x3C T=UINT32")
   field(FLNK, "$(IOC):USER-INTID11")
}
record(longin,"$(IOC):USER-INTID11")
{
   field(DTYP, "regDevAsyn")
   field(INP,  "@Usr1StdIOCUserRegisters:0x40 T=UINT32")
   field(FLNK, "$(IOC):USER-INTID12")
}
record(longin,"$(IOC):USER-INTID12")
{
   field(DTYP, "regDevAsyn")
   field(INP,  "@Usr1StdIOCUserRegisters:0x44 T=UINT32")
   field(FLNK, "$(IOC):USER-INTID13")
}
record(longin,"$(IOC):USER-INTID13")
{
   field(DTYP, "regDevAsyn")
   field(INP,  "@Usr1StdIOCUserRegisters:0x48 T=UINT32")
   field(FLNK, "$(IOC):USER-INTID14")
}
record(longin,"$(IOC):USER-INTID14")
{
   field(DTYP, "regDevAsyn")
   field(INP,  "@Usr1StdIOCUserRegisters:0x4C T=UINT32")
   field(FLNK, "$(IOC):USER-INTID15")
}
record(longin,"$(IOC):USER-INTID15")
{
   field(DTYP, "regDevAsyn")
   field(INP,  "@Usr1StdIOCUserRegisters:0x50 T=UINT32")
   field(FLNK, "$(IOC):USER-INTID16")
}
record(longin,"$(IOC):USER-INTID16")
{
   field(DTYP, "regDevAsyn")
   field(INP,  "@Usr1StdIOCUserRegisters:0x54 T=UINT32")
}

#readout of INT_TIM_x timer status register to measure interrupt latency of USR1 interrupts
#
#The timer of corresponding interrupt is started at time if INTREQ (interrupt request) and can
#be stopped at any time by software, e.g. via EPICS after a complete processing cycle of 
#application finished.
record(longout,"$(IOC):USER-INTTIM1-STOP")
{
   field(DTYP, "regDevAsyn")
   field(SCAN, "I/O Intr")
   field(OUT,  "@Usr1StdIOCUserRegistersINT1:0 T=UINT32")
   field(VAL,  "0") # according doc, a write stops the timer
   field(FLNK, "$(IOC):USER-INTTIM1")
}
record(longin,"$(IOC):USER-INTTIM1")
{
   field(DTYP, "regDevAsyn")
   field(INP,  "@Usr1StdIOCUserRegistersINT1:0 T=UINT32")
}

record(longout,"$(IOC):USER-INTTIM2-STOP")
{
   field(DTYP, "regDevAsyn")
   field(SCAN, "I/O Intr")
   field(OUT,  "@Usr1StdIOCUserRegistersINT2:0 T=UINT32")
   field(VAL,  "0") # according doc, a write stops the timer
   field(FLNK, "$(IOC):USER-INTTIM2")
}
record(longin,"$(IOC):USER-INTTIM2")
{
   field(DTYP, "regDevAsyn")
   field(INP,  "@Usr1StdIOCUserRegistersINT2:0 T=UINT32")
}

record(longout,"$(IOC):USER-INTTIM3-STOP")
{
   field(DTYP, "regDevAsyn")
   field(SCAN, "I/O Intr")
   field(OUT,  "@Usr1StdIOCUserRegistersINT3:0 T=UINT32")
   field(VAL,  "0") # according doc, a write stops the timer
   field(FLNK, "$(IOC):USER-INTTIM3")
}
record(longin,"$(IOC):USER-INTTIM3")
{
   field(DTYP, "regDevAsyn")
   field(INP,  "@Usr1StdIOCUserRegistersINT3:0 T=UINT32")
}

record(longout,"$(IOC):USER-INTTIM4-STOP")
{
   field(DTYP, "regDevAsyn")
   field(SCAN, "I/O Intr")
   field(OUT,  "@Usr1StdIOCUserRegistersINT4:0 T=UINT32")
   field(VAL,  "0") # according doc, a write stops the timer
   field(FLNK, "$(IOC):USER-INTTIM4")
}
record(longin,"$(IOC):USER-INTTIM4")
{
   field(DTYP, "regDevAsyn")
   field(INP,  "@Usr1StdIOCUserRegistersINT4:0 T=UINT32")
}

record(longout,"$(IOC):USER-INTTIM5-STOP")
{
   field(DTYP, "regDevAsyn")
   field(SCAN, "I/O Intr")
   field(OUT,  "@Usr1StdIOCUserRegistersINT5:0 T=UINT32")
   field(VAL,  "0") # according doc, a write stops the timer
   field(FLNK, "$(IOC):USER-INTTIM5")
}
record(longin,"$(IOC):USER-INTTIM5")
{
   field(DTYP, "regDevAsyn")
   field(INP,  "@Usr1StdIOCUserRegistersINT5:0 T=UINT32")
}

record(longout,"$(IOC):USER-INTTIM6-STOP")
{
   field(DTYP, "regDevAsyn")
   field(SCAN, "I/O Intr")
   field(OUT,  "@Usr1StdIOCUserRegistersINT6:0 T=UINT32")
   field(VAL,  "0") # according doc, a write stops the timer
   field(FLNK, "$(IOC):USER-INTTIM6")
}
record(longin,"$(IOC):USER-INTTIM6")
{
   field(DTYP, "regDevAsyn")
   field(INP,  "@Usr1StdIOCUserRegistersINT6:0 T=UINT32")
}

record(longout,"$(IOC):USER-INTTIM7-STOP")
{
   field(DTYP, "regDevAsyn")
   field(SCAN, "I/O Intr")
   field(OUT,  "@Usr1StdIOCUserRegistersINT7:0 T=UINT32")
   field(VAL,  "0") # according doc, a write stops the timer
   field(FLNK, "$(IOC):USER-INTTIM7")
}
record(longin,"$(IOC):USER-INTTIM7")
{
   field(DTYP, "regDevAsyn")
   field(INP,  "@Usr1StdIOCUserRegistersINT7:0 T=UINT32")
}

record(longout,"$(IOC):USER-INTTIM8-STOP")
{
   field(DTYP, "regDevAsyn")
   field(SCAN, "I/O Intr")
   field(OUT,  "@Usr1StdIOCUserRegistersINT8:0 T=UINT32")
   field(VAL,  "0") # according doc, a write stops the timer
   field(FLNK, "$(IOC):USER-INTTIM8")
}
record(longin,"$(IOC):USER-INTTIM8")
{
   field(DTYP, "regDevAsyn")
   field(INP,  "@Usr1StdIOCUserRegistersINT8:0 T=UINT32")
}

record(longout,"$(IOC):USER-INTTIM9-STOP")
{
   field(DTYP, "regDevAsyn")
   field(SCAN, "I/O Intr")
   field(OUT,  "@Usr1StdIOCUserRegistersINT9:0 T=UINT32")
   field(VAL,  "0") # according doc, a write stops the timer
   field(FLNK, "$(IOC):USER-INTTIM9")
}
record(longin,"$(IOC):USER-INTTIM9")
{
   field(DTYP, "regDevAsyn")
   field(INP,  "@Usr1StdIOCUserRegistersINT9:0 T=UINT32")
}

record(longout,"$(IOC):USER-INTTIM10-STOP")
{
   field(DTYP, "regDevAsyn")
   field(SCAN, "I/O Intr")
   field(OUT,  "@Usr1StdIOCUserRegistersINT10:0 T=UINT32")
   field(VAL,  "0") # according doc, a write stops the timer
   field(FLNK, "$(IOC):USER-INTTIM10")
}
record(longin,"$(IOC):USER-INTTIM10")
{
   field(DTYP, "regDevAsyn")
   field(INP,  "@Usr1StdIOCUserRegistersINT10:0 T=UINT32")
}

record(longout,"$(IOC):USER-INTTIM11-STOP")
{
   field(DTYP, "regDevAsyn")
   field(SCAN, "I/O Intr")
   field(OUT,  "@Usr1StdIOCUserRegistersINT11:0 T=UINT32")
   field(VAL,  "0") # according doc, a write stops the timer
   field(FLNK, "$(IOC):USER-INTTIM11")
}
record(longin,"$(IOC):USER-INTTIM11")
{
   field(DTYP, "regDevAsyn")
   field(INP,  "@Usr1StdIOCUserRegistersINT11:0 T=UINT32")
}

record(longout,"$(IOC):USER-INTTIM12-STOP")
{
   field(DTYP, "regDevAsyn")
#   field(SCAN, "I/O Intr")  # commented out since we kick stop of timer measurement with FLNK after we finish our sample application
   field(OUT,  "@Usr1StdIOCUserRegistersINT12:0 T=UINT32")
   field(VAL,  "0") # according doc, a write stops the timer
   field(FLNK, "$(IOC):USER-INTTIM12")
}
record(longin,"$(IOC):USER-INTTIM12")
{
   field(DTYP, "regDevAsyn")
   field(INP,  "@Usr1StdIOCUserRegistersINT12:0 T=UINT32")
   field(FLNK, "$(IOC):USER-INTTIM12-MAX")
}
record(calcout,"$(IOC):USER-INTTIM12-MAX") 
{ 
   field(DESC ,"calc. intr counter")
   field(INPA ,"$(IOC):USER-INTTIM12.VAL NPP")
   field(INPB ,"$(IOC):USER-INTTIM12-MAX.VAL NPP")
   field(CALC ,"(A>=B)?A:B")
   field(VAL  ,"0")
   field(FLNK, "$(IOC):USER-INTTIM12-HIST")
}
record(histogram, "$(IOC):USER-INTTIM12-HIST")
{
    field(DESC, "histogram")
    field(DTYP, "Soft Channel")
    field(SVL , "$(IOC):USER-INTTIM12 NPP")
    field(NELM, "1000")      # number of bins for region defined below
    field(ULIM, "1000000")   # max in x10 ns = 10 ms
    field(LLIM, "0")         # min in x10 ns
}

record(longout,"$(IOC):USER-INTTIM13-STOP")
{
   field(DTYP, "regDevAsyn")
   field(SCAN, "I/O Intr")
   field(OUT,  "@Usr1StdIOCUserRegistersINT13:0 T=UINT32")
   field(VAL,  "0") # according doc, a write stops the timer
   field(FLNK, "$(IOC):USER-INTTIM13")
}
record(longin,"$(IOC):USER-INTTIM13")
{
   field(DTYP, "regDevAsyn")
   field(INP,  "@Usr1StdIOCUserRegistersINT13:0 T=UINT32")
}

record(longout,"$(IOC):USER-INTTIM14-STOP")
{
   field(DTYP, "regDevAsyn")
   field(SCAN, "I/O Intr")
   field(OUT,  "@Usr1StdIOCUserRegistersINT14:0 T=UINT32")
   field(VAL,  "0") # according doc, a write stops the timer
   field(FLNK, "$(IOC):USER-INTTIM14")
}
record(longin,"$(IOC):USER-INTTIM14")
{
   field(DTYP, "regDevAsyn")
   field(INP,  "@Usr1StdIOCUserRegistersINT14:0 T=UINT32")
}

record(longout,"$(IOC):USER-INTTIM15-STOP")
{
   field(DTYP, "regDevAsyn")
   field(SCAN, "I/O Intr")
   field(OUT,  "@Usr1StdIOCUserRegistersINT15:0 T=UINT32")
   field(VAL,  "0") # according doc, a write stops the timer
   field(FLNK, "$(IOC):USER-INTTIM15")
}
record(longin,"$(IOC):USER-INTTIM15")
{
   field(DTYP, "regDevAsyn")
   field(INP,  "@Usr1StdIOCUserRegistersINT15:0 T=UINT32")
}

record(longout,"$(IOC):USER-INTTIM16-STOP")
{
   field(DTYP, "regDevAsyn")
   field(SCAN, "I/O Intr")
   field(OUT,  "@Usr1StdIOCUserRegistersINT16:0 T=UINT32")
   field(VAL,  "0") # according doc, a write stops the timer
   field(FLNK, "$(IOC):USER-INTTIM16")
}
record(longin,"$(IOC):USER-INTTIM16")
{
   field(DTYP, "regDevAsyn")
   field(INP,  "@Usr1StdIOCUserRegistersINT16:0 T=UINT32")
}

######################################################################
# Listen to USER interrupt 12 and fire an EPICS soft event with nr. 12

# Here we make longin from offset 0x0, but this has no influence where we read.
# It is important we listen to I/O Intr of correct virtual device.
# This is some small overhead of one 32-bit read access before firing EPICS soft-event 12.
record(longin,"$(IOC):USER-INTEVT-12-RX")
{
   field(DTYP, "regDevAsyn")
   field(SCAN, "I/O Intr")
   field(INP,  "@Usr1StdIOCUserRegistersINT12:0x0 T=UINT32") 
#   field(FLNK, "$(IOC):USER-RAMP-IN") # directly FLNK to dma input transfer if required
   field(FLNK, "$(IOC):USER-INTEVT-12") # fire EPICS soft-event 12
}
record(event,"$(IOC):USER-INTEVT-12")
{
    field(DESC,"user intr. 12")
    field(DTYP,"Soft Channel")
    field(VAL ,"12")
}


######################################################################
######################################################################
# here the application itself starts, we read some ramp data

# the ramp waveform, readout with EPICS soft-event 12
# (see startup.script for virtual device definition)
record(aai,"$(IOC):USER-RAMP-IN")
{
   field(DTYP, "regDevAsyn")
   field(SCAN, "Event")
   field(EVNT, "12")
   field(INP,  "@Usr1StdIOCUserRamp/0x0 T=UINT32")
   field(NELM, "1024")
   field(FTVL, "ULONG")
   field(FLNK, "$(IOC):USER-RAMP-OUT")
}

record(aao,"$(IOC):USER-RAMP-OUT")
{
   field(DTYP, "regDevAsyn")
   field(OUT,  "@Usr1StdIOCUserRamp/0x1000 T=UINT32")
   field(NELM, "1024")
   field(FTVL, "ULONG")
#   field(FLNK, "$(IOC):SOFT-INTID12-CALC")  # kick SOFT record interrupt counter
#   field(FLNK, "$(IOC):USER-INTTIM12-STOP") # kick latency counter stop record
   field(FLNK, "$(IOC):SMEM-ReadInitiator") # kick shared memory readout
}

